name: Generate IPK Repository Files

on:
  workflow_dispatch:
  push:
    paths:
      - '**.ipk'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - devices/ln6001/fw_v1.0.3.01/enterprise/curated
          - devices/ln6001/fw_v1.0.3.01/enterprise/supported
          - devices/ln6001/fw_v1.0.3.01/home/curated

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get names
      id: name
      run: |
        device=$(echo ${{ matrix.path }} | cut -d/ -f2)
        fw=$(echo ${{ matrix.path }} | cut -d/ -f3)
        flavor=$(echo ${{ matrix.path }} | cut -d/ -f4)
        category=$(echo ${{ matrix.path }} | cut -d/ -f5 || echo "base")

        echo "device=$device"
        echo "fw=$fw"
        echo "flavor=$flavor"
        echo "category=$category"

        echo "device=${device}" >> $GITHUB_OUTPUT
        echo "fw=${fw}" >> $GITHUB_OUTPUT
        echo "flavor=${flavor}" >> $GITHUB_OUTPUT
        echo "category=${category}" >> $GITHUB_OUTPUT

    - name: Debugging: Print path variables
      run: |
        echo "Matrix path: ${{ matrix.path }}"
        echo "Device: ${{ steps.name.outputs.device }}"
        echo "Firmware: ${{ steps.name.outputs.fw }}"
        echo "Flavor: ${{ steps.name.outputs.flavor }}"
        echo "Category: ${{ steps.name.outputs.category }}"

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gzip tar coreutils

    - name: Create necessary directories
      run: |
        mkdir -p ./repo/IPK_files
        mkdir -p ./repo/usign/build
        mkdir -p ./output
        mkdir -p ./temp

    - name: Copy precompiled usign binary
      run: |
        cp ./usign/build/usign ./repo/usign/build/usign

    - name: Set execute permissions for usign
      run: |
        chmod +x ./repo/usign/build/usign

    - name: Debugging: Check directory structure
      run: |
        echo "Listing current directory:"
        ls -R

    - name: Copy precompiled IPKs
      run: |
        echo "Copying IPK files from ${{ matrix.path }}"
        if [ "${{ steps.name.outputs.category }}" = "base" ]; then
          find ${{ matrix.path }} -type f -name '*.ipk' -exec cp {} ./repo/IPK_files/ \;
        else
          find ${{ matrix.path }} -type f -name '*.ipk' -exec cp {} ./repo/IPK_files/ \;
        fi

    - name: Debugging: List copied IPK files
      run: |
        echo "Listing IPK files in ./repo/IPK_files:"
        ls -l ./repo/IPK_files

    - name: Add tags to package descriptions
      run: |
        for file in ./repo/IPK_files/*.ipk; do
          echo "Processing file: $file"
          mkdir -p ./temp/ipk_contents
          tar -xzf "$file" -C ./temp/ipk_contents
          tar -xzf ./temp/ipk_contents/control.tar.gz -C ./temp/ipk_contents
          control_file=./temp/ipk_contents/control
          if [ "${{ steps.name.outputs.category }}" = "curated" ]; then
            tag="[Linksys curated]"
          elif [ "${{ steps.name.outputs.category }}" = "supported" ]; then
            tag="[Linksys supported]"
          else
            tag=""
          fi
          if [ -n "$tag" ]; then
            echo "Adding tag: $tag to $control_file"
            sed -i "s/^Description:/Description: $tag /" "$control_file"
          fi
          tar -czf ./temp/ipk_contents/control.tar.gz -C ./temp/ipk_contents control
          tar -czf "$file" -C ./temp/ipk_contents .
          rm -rf ./temp/ipk_contents
        done

    - name: Generate Packages file
      run: |
        echo "Running generate_packages.sh script"
        chmod +x ./scripts/generate_packages.sh
        ./scripts/generate_packages.sh

    - name: Compress Packages file
      run: |
        echo "Running compress_packages.sh script"
        chmod +x ./scripts/compress_packages.sh
        ./scripts/compress_packages.sh

    - name: Generate Packages manifest
      run: |
        echo "Running generate_manifest.sh script"
        chmod +x ./scripts/generate_manifest.sh
        ./scripts/generate_manifest.sh

    - name: Sign Packages file
      env:
        USIGN_PRIVATE_KEY: ${{ secrets.USIGN_PRIVATE_KEY }}
      run: |
        echo "Running sign_packages.sh script"
        chmod +x ./scripts/sign_packages.sh
        ./scripts/sign_packages.sh ./output/Packages ./output/Packages.sig "$USIGN_PRIVATE_KEY" ./repo/usign/build/usign

    - name: Debugging - List output files
      run: |
        echo "Listing files in ./output:"
        ls -l ./output
        echo "Contents of ./output/Packages:"
        cat ./output/Packages

    - name: Move files to root directory
      run: |
        echo "Moving files to root directory"
        mv ./output/* ${{ github.workspace }}
        mv ./repo/IPK_files/* ${{ github.workspace }}

    - name: Output Date
      id: date
      run: |
        date="$(date +'%Y-%m-%d')"
        echo "date=$date"
        echo "date=${date}" >> $GITHUB_OUTPUT

    - name: Upload generated files
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.name.outputs.device }}-${{ steps.name.outputs.fw }}-${{ steps.name.outputs.flavor }}-${{ steps.name.outputs.category }}--${{ steps.date.outputs.date }}
        path: |
          ${{ github.workspace }}/Packages
          ${{ github.workspace }}/Packages.gz
          ${{ github.workspace }}/Packages.manifest
          ${{ github.workspace }}/Packages.sig
          ${{ github.workspace }}/*.ipk
        if-no-files-found: error

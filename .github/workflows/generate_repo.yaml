name: Generate IPK Repository Files and Upload to S3

on:
  workflow_dispatch:
  push:
    paths:
      - '**.ipk'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - devices/ln6001/fw_v1.0.3.01/enterprise/curated
          - devices/ln6001/fw_v1.0.3.01/enterprise/supported
          - devices/ln6001/fw_v1.0.3.01/home/curated
          - devices/ln6001/fw_v1.0.3.01/home/supported
          - devices/ln6001/fw_v1.0.3.01/privacyui/curated
          - devices/ln6001/fw_v1.0.3.01/privacyui/supported
          - devices/ln6001/fw_v1.1.0.01/enterprise/curated
          - devices/ln6001/fw_v1.1.0.01/enterprise/supported
          - devices/ln6001/fw_v1.1.0.01/home/curated
          - devices/ln6001/fw_v1.1.0.01/home/supported
          - devices/ln6001/fw_v1.1.0.01/privacyui/curated
          - devices/ln6001/fw_v1.1.0.01/privacyui/supported
          - devices/ln6002/fw_v1.0.1.01/enterprise/curated
          - devices/ln6002/fw_v1.0.1.01/enterprise/supported
          - devices/ln6002/fw_v1.0.1.01/home/curated
          - devices/ln6002/fw_v1.0.1.01/home/supported
          - devices/ln6002/fw_v1.0.1.01/privacyui/curated
          - devices/ln6002/fw_v1.0.1.01/privacyui/supported

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get names
      id: name
      run: |
        device=$(echo ${{ matrix.path }} | cut -d/ -f2)
        fw=$(echo ${{ matrix.path }} | cut -d/ -f3)
        flavor=$(echo ${{ matrix.path }} | cut -d/ -f4)
        category=$(echo ${{ matrix.path }} | cut -d/ -f5)
        date=$(date +'%Y-%m-%d')

        echo "device=$device"
        echo "fw=$fw"
        echo "flavor=$flavor"
        echo "category=$category"
        echo "date=$date"

        echo "device=${device}" >> $GITHUB_ENV
        echo "fw=${fw}" >> $GITHUB_ENV
        echo "flavor=${flavor}" >> $GITHUB_ENV
        echo "category=${category}" >> $GITHUB_ENV
        echo "date=${date}" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gzip tar coreutils zip awscli

    - name: List existing IPKs in S3
      id: list_s3
      run: |
        bucket_name="wrtrepo-out-test"
        dir_to_check="${{ env.device }}/${{ env.fw }}/${{ env.flavor }}/${{ env.category }}"
        existing_ipks=$(aws s3 ls s3://$bucket_name/$dir_to_check/ --recursive | awk '{print $4}')
        echo "existing_ipks=$existing_ipks" >> $GITHUB_ENV

    - name: Compare and Copy new IPKs
      id: compare_ipks
      run: |
        mkdir -p ./output/${{ env.device }}/${{ env.fw }}/${{ env.flavor }}/${{ env.category }}
        for ipk in $(find ${{ matrix.path }} -type f -name '*.ipk'); do
          ipk_name=$(basename $ipk)
          if ! echo "${{ env.existing_ipks }}" | grep -q "$dir_to_check/$ipk_name"; then
            cp $ipk ./output/${{ env.device }}/${{ env.fw }}/${{ env.flavor }}/${{ env.category }}/
            echo "New IPK copied: $ipk_name"
          else
            echo "IPK already exists in S3: $ipk_name"
          fi
        done

    - name: Generate Packages file
      if: always()
      run: |
        chmod +x ./scripts/generate_packages.sh
        ./scripts/generate_packages.sh ${{ env.category }}
        echo "Contents of Packages file:"
        cat ./output/${{ env.device }}/${{ env.fw }}/${{ env.flavor }}/${{ env.category }}/Packages

    - name: Compress Packages file
      if: always()
      run: |
        chmod +x ./scripts/compress_packages.sh
        ./scripts/compress_packages.sh
        echo "Contents of Packages.gz file:"
        gunzip -c ./output/${{ env.device }}/${{ env.fw }}/${{ env.flavor }}/${{ env.category }}/Packages.gz

    - name: Generate Packages manifest
      if: always()
      run: |
        chmod +x ./scripts/generate_manifest.sh
        ./scripts/generate_manifest.sh
        echo "Contents of Packages.manifest file:"
        cat ./output/${{ env.device }}/${{ env.fw }}/${{ env.flavor }}/${{ env.category }}/Packages.manifest

    - name: Sign Packages file
      if: always()
      env:
        USIGN_PRIVATE_KEY: ${{ secrets.USIGN_PRIVATE_KEY }}
      run: |
        chmod +x ./scripts/sign_packages.sh
        ./scripts/sign_packages.sh ./output/${{ env.device }}/${{ env.fw }}/${{ env.flavor }}/${{ env.category }}/Packages ./output/${{ env.device }}/${{ env.fw }}/${{ env.flavor }}/${{ env.category }}/Packages.sig "$USIGN_PRIVATE_KEY" ./output/usign

    - name: Upload individual artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.device }}-${{ env.fw }}-${{ env.flavor }}-${{ env.category }}--${{ env.date }}
        path: ./output/${{ env.device }}/${{ env.fw }}/${{ env.flavor }}/${{ env.category }}/**

  upload-to-s3:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Organize and upload to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        for artifact in ./artifacts/*; do
          dest_path="s3://wrtrepo-out-test/${artifact##*/}"
          echo "Uploading $artifact to $dest_path"
          aws s3 cp "$artifact" "$dest_path" --recursive --sse AES256
        done

    - name: Create master ZIP file
      run: |
        mkdir -p master_repo/artifacts
        cp -r ./artifacts/* master_repo/artifacts/
        zip -r master_repo.zip master_repo
        echo "Contents of master_repo:"
        ls -R master_repo

    - name: Upload master ZIP file
      uses: actions/upload-artifact@v4
      with:
        name: master_repo
        path: master_repo.zip
